// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Template {
  id          String          @id @default(cuid())
  name        String
  description String
  body        String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  fields      TemplateField[]

  user     User    @relation(fields: [userId], references: [id])
  userId   String
  isPublic Boolean @default(false)

  @@index([name])
}

model TemplateField {
  id         String                @id @default(cuid())
  name       String
  type       String
  template   Template              @relation(fields: [templateId], references: [id])
  templateId String
  options    TemplateFieldOption[]
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model TemplateFieldOption {
  id        String        @id @default(cuid())
  name      String
  value     String
  field     TemplateField @relation(fields: [fieldId], references: [id])
  fieldId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id               String       @id @default(cuid())
  name             String?
  email            String?      @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  tokenUsages      TokenUsage[]
  topUps           TopUp[]
  currentBalance   Int          @default(0)
  stripeCustomerId String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  templates Template[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Billing

model TokenUsage {
  id        String   @id @default(uuid())
  input     Int
  output    Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model TopUp {
  id                      String    @id @default(uuid())
  amount                  Int?
  stripeCheckoutSessionId String?
  note                    String?
  createdAt               DateTime  @default(now())
  confirmedAt             DateTime?
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
}
