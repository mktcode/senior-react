// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Feedback

model Feedback {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  body      String   @db.Text
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FeedbackSummary {
  id        String   @id @default(cuid())
  body      String   @db.Text
  rating    Int
  createdAt DateTime @default(now())
}

// Templates

model Template {
  id           String          @id @default(cuid())
  name         String
  description  String          @db.Text
  body         String          @db.Text
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  fields       TemplateField[]
  chatSessions ChatSession[]

  user     User?   @relation(fields: [userId], references: [id])
  userId   String?
  isPublic Boolean @default(false)
  llm      Llm     @relation(fields: [llmId], references: [id])
  llmId    String

  @@index([name])
}

enum TemplateFieldType {
  combobox
  text
}

model TemplateField {
  id           String                @id @default(cuid())
  name         String
  type         TemplateFieldType     @default(combobox)
  description  String                @db.Text
  defaultValue String                @default("") @db.Text
  template     Template              @relation(fields: [templateId], references: [id], onDelete: Cascade)
  templateId   String
  options      TemplateFieldOption[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
}

model TemplateFieldOption {
  id        String        @id @default(cuid())
  value     String        @db.Text
  field     TemplateField @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  fieldId   String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String   @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model User {
  id               String        @id @default(cuid())
  name             String?
  email            String?       @unique
  emailVerified    DateTime?
  image            String?
  accounts         Account[]
  sessions         Session[]
  tokenUsages      TokenUsage[]
  topUps           TopUp[]
  templates        Template[]
  feedback         Feedback[]
  chatSessions     ChatSession[]
  currentBalance   Float         @default(0.0)
  stripeCustomerId String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// LLM Providers

model LlmProvider {
  id         String   @id @default(uuid())
  name       String
  url        String
  pricingUrl String
  llms       Llm[]
  createdAt  DateTime @default(now())
}

model Llm {
  id            String       @id @default(uuid())
  name          String
  label         String
  priceIn       Float
  priceOut      Float
  priceInBatch  Float
  priceOutBatch Float
  margin        Int          @default(50)
  provider      LlmProvider  @relation(fields: [providerId], references: [id])
  tokenUsage    TokenUsage[]
  templates     Template[]
  providerId    String
  createdAt     DateTime     @default(now())
}

// Chat

model ChatSession {
  id           String        @id @default(uuid())
  title        String        @default("Current Chat")
  template     Template      @relation(fields: [templateId], references: [id])
  templateId   String
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime      @default(now())
  chatMessages ChatMessage[]
}

enum ChatMessageRole {
  assistant
  user
  system
  tool
}

model ChatMessage {
  id            String          @id @default(uuid())
  role          ChatMessageRole
  content       String          @db.Text
  chatSession   ChatSession     @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  chatSessionId String
  createdAt     DateTime        @default(now())
}

// Billing

model TokenUsage {
  id         String   @id @default(uuid())
  input      Int
  inputCost  Float
  output     Int
  outputCost Float
  llm        Llm      @relation(fields: [llmId], references: [id])
  llmId      String
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
}

model TopUp {
  id                      String    @id @default(uuid())
  amount                  Int?
  stripeCheckoutSessionId String?
  note                    String?
  createdAt               DateTime  @default(now())
  confirmedAt             DateTime?
  user                    User      @relation(fields: [userId], references: [id])
  userId                  String
}
